buildscript {
    ext.versions = [
        kotlin               : "1.4.0",
        cliCore              : "1.0.1",
        velocity             : "1.7",
        jCommander           : "1.72",
        jansi                : "1.17",
        guava                : "28.2-jre",
        jline                : "3.6.2",
        kodein               : "5.0.0",
        practicalxml         : "1.1.0",
        gson                 : "2.3.1",
        fuel                 : "2.3.1",
        maven                : "3.6.2",
        json                 : "20180813",
        nxrm3                : "3.27.0-03",
        commonsLang          : "2.4-cuba.0",
        commonsConfiguration : "1.10",
        commonsLogging       : "1.1.1",
        commonsLang3         : "3.5",
        commonsCompress      : "1.20",
        commonsCollections   : "3.2.2",
        kotlinXmlBuilder     : "1.6.0",
        jUnit                : "4.12",
        toolingApi           : "6.6.1",
        mvnrepo              : "1.1.0",
        mapdb                : "3.0.8",
        slf4j                : "1.7.10",
        eclipseCollections   : "7.0.0",
        elsa                 : "3.0.0-M5",
        j2objcAnnotations    : "1.3",
        failureaccess        : "1.0.1",
        checkerQual          : "2.10.0",
        errorProneAnnotations: "2.3.4",
        result               : "3.1.0",
        lz4                  : "1.3.0",
        plexus               : "3.2.1"

    ]

    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER') ?: 'cuba'
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD') ?: 'cuba123'
            }
            url System.getenv('HAULMONT_REPOSITORY_URL') ?: 'https://repo.cuba-platform.com/content/groups/work'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "edu.sc.seis:macAppBundle:2.3.0"
    }
}

apply plugin: 'base'

// fix non-writable files in 'legal/'
ext.osName = System.getProperty("os.name").toLowerCase()

ext.javaHome = System.getenv("JAVA11_HOME") ?: System.getenv("JAVA_HOME")

if (project.hasProperty('targetOsPlatform')) {
    ext.targetOsPlatform = project['targetOsPlatform']
} else {
    if (ext.osName.contains('mac')) {
        ext.targetOsPlatform = 'macos'
    } else if (ext.osName.contains('win')) {
        ext.targetOsPlatform = 'windows'
    } else {
        ext.targetOsPlatform = 'linux'
    }
}

ext.bundlePlatform = ext.targetOsPlatform ? "-" + ext.targetOsPlatform : ""

ext.bundleOutput = file("${rootProject.buildDir}/bundle" + ext.bundlePlatform)
ext.nativeBundle = file("${ext.bundleOutput}/native" + ext.bundlePlatform)
def buildVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : '1.0-SNAPSHOT'

allprojects {
    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER') ?: 'cuba'
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD') ?: 'cuba123'
            }
            url System.getenv('HAULMONT_REPOSITORY_URL') ?: 'https://repo.cuba-platform.com/content/groups/work'
        }
    }

}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    //so that we can use 'compile', 'testCompile' for dependencies

    sourceCompatibility = 11f
    targetCompatibility = 11

    group 'com.haulmont.cli.sdk'
    version buildVersion

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"

        implementation("com.haulmont.cli.core:cli-core:$versions.cliCore")

        implementation "com.beust:jcommander:$versions.jCommander"
        implementation "org.jline:jline:$versions.jline"
        implementation "org.fusesource.jansi:jansi:$versions.jansi"

        // Using custom JAR without 'enum' package
        implementation("commons-lang:commons-lang:$versions.commonsLang")

        implementation("com.google.guava:guava:$versions.guava") {
            exclude(group: 'com.google.code.findbugs', module: 'jsr305')
        }

        implementation "org.kodein.di:kodein-di-generic-jvm:$versions.kodein"

        implementation("com.google.code.gson:gson:$versions.gson")

        implementation("commons-configuration:commons-configuration:$versions.commonsConfiguration") {
            exclude(group: 'commons-lang', module: 'commons-lang')
        }

        implementation("commons-logging:commons-logging:$versions.commonsLogging")

        implementation("org.json:json:$versions.json")
    }

    configurations {
        compile {
            exclude(group: 'org.jetbrains', module: 'annotations')
        }
    }

    [compileKotlin, compileTestKotlin].each {
        it.kotlinOptions.jvmTarget = '1.8'
    }
}

///////////////////MAC OS/////////////////

if (project.hasProperty('buildDmg')) {

    def macBuildZipUnpackDirName = "app-mac"
    def macBuildZipUnpackDir = "${project.buildDir}/${macBuildZipUnpackDirName}"
    def postfix = buildVersion
    def dmgAppName = "cuba-sdk-${postfix}"

    apply plugin: "edu.sc.seis.macAppBundle"
    // do not create .app on dmg creation, we have .app from bundle task
    createApp.enabled = false
    createApp.dependsOn.each { t -> t.enabled = false }

    macAppBundle {
        appName = "CUBA SDK"
        volumeName = "cuba-sdk-${postfix}"
        appOutputDir = macBuildZipUnpackDirName
        dmgName = dmgAppName
        backgroundImage = "etc/img/background.png"
        icon = "etc/img/cuba-sdk.icns"
        certIdentity = project.property('certIdentity').replace('"', '')

        if (project.hasProperty('keyChain')) {
            keyChain = project.property('keyChain').replace('"', '')
        }
    }

    def JARS_TO_REPACK = []

    for (jarFile in file("${bundleOutput}/plugins").listFiles()) {
        def name = jarFile.name.substring(0, jarFile.name.lastIndexOf("."))
        JARS_TO_REPACK.add(["name": name, "path": "plugins/${jarFile.name}", "nameTemplate": "*.*lib"])
    }

    task copyJDK(dependsOn: subprojects.findResults { it.tasks.findByName("bundle") }.flatten()) {
        inputs.dir(rootProject.bundleOutput)
        outputs.dir("${macBuildZipUnpackDir}/${project.macAppBundle.appName}.app/")

        doLast {
            def appContentDir = "${macBuildZipUnpackDir}/${project.macAppBundle.appName}.app/Contents"

            file(appContentDir).deleteDir()

            ant.copy(todir: appContentDir) {
                fileset(dir: "$rootProject.bundleOutput", defaultexcludes: "no")
            }

            ant.copy(todir: appContentDir) {
                fileset(dir: "$rootDir/etc/OSX", defaultexcludes: "no")
            }

            ant.replace (
                file: "$appContentDir/Info.plist",
                token: '@@libVersion@@',
                value: buildVersion
            )
        }
    }

    task markExecutable(dependsOn: copyJDK) {
        doLast {
            def appContentDir = "${macBuildZipUnpackDir}/${project.macAppBundle.appName}.app/Contents"
            def executableDir = appContentDir + "/MacOS"

            exec {
                executable 'chmod'
                args = ['-R', '777', "$appContentDir"]
            }
            exec {
                executable 'chmod'
                args = ['a+x', "$executableDir/${project.macAppBundle.appName}"]
            }
            exec {
                executable 'chmod'
                args = ['a+x', "$appContentDir/bin/cuba-sdk"]
            }
        }
    }

    task codeSignJarContents(dependsOn: markExecutable) {
        def signJarContents = { jarName, jarPath, nameTemplate ->
            def workDir = "${project.buildDir}/${-> project.macAppBundle.appOutputDir}"
            exec {
                workingDir workDir
                commandLine "unzip", "-qq", "-o", "${-> project.macAppBundle.appName}.app/Contents/$jarPath", "-d", "tmp/$jarName"
            }
            exec {
                workingDir "$workDir/tmp"
                def tmpCommandLine = ["find", "$jarName", "-type", "f", "-name", "$nameTemplate", "-exec",
                                      "codesign", "-f", "--timestamp", "--entitlements", "$rootDir/etc/sdk.entitlements",
                                      "-s", "${-> project.macAppBundle.certIdentity}", "--options", "runtime", "-v", "--verbose", "{}", ";"]

                if (project.macAppBundle.keyChain) {
                    tmpCommandLine << "--keychain" << "${-> project.macAppBundle.keyChain}"
                }

                commandLine tmpCommandLine
            }
            exec {
                workingDir "$workDir/tmp/$jarName"
                commandLine = ["find", ".", "-maxdepth", "1", "-exec", "zip", "-r", "-q", "$workDir/tmp/${jarName}.jar", "{}", ";"]
            }
            delete("$workDir/tmp/$jarName")
            exec {
                workingDir workDir
                commandLine "mv", "-f", "tmp/${jarName}.jar", "${-> project.macAppBundle.appName}.app/Contents/plugins"
            }
        }

        doLast {
            mkdir "${project.buildDir}/${-> project.macAppBundle.appOutputDir}/tmp"
            JARS_TO_REPACK.each {
                entry -> signJarContents(entry.name, entry.path, entry.nameTemplate)
            }
            delete("${project.buildDir}/${-> project.macAppBundle.appOutputDir}/tmp")
        }
    }


    task codeSignContents(type: Exec, dependsOn: codeSignJarContents) {
        workingDir "${project.buildDir}/${-> project.macAppBundle.appOutputDir}"
        def tmpCommandLine = ["find", "${-> project.macAppBundle.appName}.app", "-type", "f", "-exec",
                              "codesign", "-f", "--timestamp", "--entitlements", "$rootDir/etc/sdk.entitlements",
                              "-s", "${-> project.macAppBundle.certIdentity}", "--options", "runtime", "-v", "--verbose", "{}", ";"]

        if (project.macAppBundle.keyChain) {
            tmpCommandLine << "--keychain" << "${-> project.macAppBundle.keyChain}"
        }

        commandLine tmpCommandLine
    }

    task codeSignApp(type: Exec, dependsOn: codeSignContents) {
        workingDir "${project.buildDir}/${-> project.macAppBundle.appOutputDir}"
        def tmpCommandLine = ["codesign", "-f", "--timestamp", "--entitlements", "$rootDir/etc/sdk.entitlements",
                              "-s", "${-> project.macAppBundle.certIdentity}", "--options", "runtime", "-v", "--verbose",
                              "${-> project.macAppBundle.appName}.app"]

        if (project.macAppBundle.keyChain) {
            tmpCommandLine << "--keychain" << "${-> project.macAppBundle.keyChain}"
        }

        commandLine tmpCommandLine
    }

    createDmg.mustRunAfter codeSignApp

    task buildDmg(dependsOn: [codeSignApp, generatePlist, createDmg]) {
        doLast {}
    }

    if (project.hasProperty('developerId') && project.hasProperty('developerIdPassword')) {
        task notarizeDmg(type: Exec) {
            workingDir "${buildDir}/"
            commandLine "xcrun", "altool", "--notarize-app", "--primary-bundle-id", "com.haulmont.studio",
                "--username", developerId, "--password", developerIdPassword,
                "--file", "${dmgAppName}.dmg"
        }
    }
}