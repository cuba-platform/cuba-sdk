buildscript {
    ext.kotlin_version = '1.3.60'

    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER') ?: 'cuba'
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD') ?: 'cuba123'
            }
            url System.getenv('HAULMONT_REPOSITORY_URL') ?: 'https://repo.cuba-platform.com/content/groups/work'
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:0.4.2"
    }
}

group 'com.haulmont.cuba.cli.plugin'
version '0.1-SNAPSHOT'

def moduleName = "com.haulmont.cuba.cli.plugin.sdk"

def velocityVersion = "1.7"
def jCommanderVersion = "1.72"
def jansiVersion = "1.17"
def guavaVersion = "26.0-jre"
def jlineVersion = "3.6.2"
def kodeinVersion = "5.0.0"
def practicalxmlVersion = "1.1.0"
def gsonVersion = "2.3.1"
def fuelVersion = "2.2.0"

apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'org.jetbrains.gradle.plugin.idea-ext'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    jcenter()
    mavenLocal()

    maven {
        url "https://dl.bintray.com/cuba-platform/main"
    }
}

task sourceJar(type: Jar) {
    from file('src/main/java')
    from file('src/main/kotlin')
    from file('src/main/resources')
    classifier = 'sources'
}

artifacts {
    archives sourceJar
}

idea.project.settings {
    copyright {
        useDefault = 'Apache'
        profiles {
            Apache {
                allowReplaceRegexp = ''
                keyword = 'Copyright'
                notice = '''Copyright (c) 2008-$today.year Haulmont.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.'''
            }
        }
    }
}

idea {
    project {
        vcs = 'Git'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

    implementation "com.beust:jcommander:$jCommanderVersion"
    implementation "org.jline:jline:$jlineVersion"
    implementation "org.fusesource.jansi:jansi:$jansiVersion"

    implementation("org.apache.velocity:velocity:$velocityVersion") {
        // jlink: org.apache.commons.lang.enum: Invalid package name: 'enum' is not a Java identifier
        exclude(group: 'commons-lang', module: 'commons-lang')
    }
    // Using custom JAR without 'enum' package
    implementation("commons-lang:commons-lang:2.4-cuba.0")

    implementation("com.google.guava:guava:$guavaVersion") {
        exclude(group: 'com.google.code.findbugs', module: 'jsr305')
    }

    implementation "org.kodein.di:kodein-di-generic-jvm:$kodeinVersion"

    implementation("net.sf.practicalxml:practicalxml:$practicalxmlVersion") {
        exclude(group: "junit", module: "junit")
    }

    implementation("com.google.code.gson:gson:$gsonVersion")

    implementation("commons-configuration:commons-configuration:1.10") {
        exclude(group: 'commons-lang', module: 'commons-lang')
    }

    implementation("commons-logging:commons-logging:1.1.1'")
    compile("com.github.kittinunf.fuel:fuel:$fuelVersion"){
        exclude(group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib')
    }
    compile("com.github.kittinunf.fuel:fuel-coroutines:$fuelVersion"){
        exclude(group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib')
    }
//    implementation("com.github.kittinunf.result:result:$fuelVersion")
//    implementation("com.github.kittinunf.result:result-coroutines:$fuelVersion")

    testImplementation group: 'junit', name: 'junit', version: '4.12'

    implementation "com.haulmont.cuba.cli:cuba-cli:2.1-SNAPSHOT"
}

[compileKotlin, compileTestKotlin].each {
    it.kotlinOptions.jvmTarget = '1.8'
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--patch-module', "$moduleName=${compileKotlin.destinationDir}"
        ]
        classpath = files()
    }
}

task installPlugin(group: 'install', dependsOn: [jar], type: Copy) {
    inputs.files jar.outputs.files

    jar.outputs.files.each {
        from it
    }

    configurations.compile.each {
//        if (!it.name.contains("kotlin"))
            from it
    }

    into System.getProperty("user.home") + "/.haulmont/cli/plugins/"
}

task copyLibs(type: Copy) {
    from configurations.compile
    into System.getProperty("user.home") + "/.haulmont/cli/plugins/"
}
