import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {

    repositories {
        if (project.hasProperty("sdkRepositories")) {
            def sdkRepos = new JsonSlurper().parseText(project.properties["sdkRepositories"])
            sdkRepos.each { repo ->
                if (repo.type == "LOCAL") {
                    maven {
                        url file(repo.url)
                    }
                } else {
                    maven {
                        if (repo.authentication != null) {
                            credentials {
                                username repo.authentication.login
                                password repo.authentication.password
                            }
                        }
                        url repo.url
                    }
                }
            }

        } else {
            mavenLocal()
            mavenCentral()
        }
    }
}

repositories {
    jcenter()
    mavenLocal()

    maven {
        url "https://dl.bintray.com/cuba-platform/main"
    }
}

configurations {
    extraLibs
}

apply plugin: 'maven'
apply plugin: "maven-publish"

ext.getCustomExtensionFromCoordinates = { coordinates ->
    return coordinates.tokenize('@').last()
}

ext.getClassifierFromCoordinates = { coordinates ->
    def split = coordinates.tokenize(":")
    if (split.size > 3) {
        return split[3].tokenize('@').first()
    }
    return null
}

ext.getPom = { artifact ->
    // get the pom
    def split = artifact.tokenize(":")
    def component = project.dependencies.createArtifactResolutionQuery()
            .forModule(split[0], split[1], split[2])
            .withArtifacts(MavenModule, MavenPomArtifact)
            .execute()
            .resolvedComponents[0]
    def artifacts = component?.getArtifacts(MavenPomArtifact)
    if (artifacts == null) {
        return null
    }
    def pomFile = component?.getArtifacts(MavenPomArtifact)[0]?.file
    return pomFile
}

ext.getAllArtifacts = { artifact ->
    // get the pom
    def component = project.dependencies.createArtifactResolutionQuery()
            .forComponents(artifact.id.componentIdentifier)
            .withArtifacts(MavenModule, MavenPomArtifact)
            .execute()
            .resolvedComponents[0]
    def pomFile = component?.getArtifacts(MavenPomArtifact)[0]?.file
    component = project.dependencies.createArtifactResolutionQuery()
            .forComponents(artifact.id.componentIdentifier)
            .withArtifacts(JvmLibrary, SourcesArtifact)
            .execute()
            .resolvedComponents[0]
    def sourceFile = component?.getArtifacts(SourcesArtifact)[0]?.file
    return ["@pom": pomFile, "sources@jar": sourceFile]
}

ext.resolveArtifact = { art, resolveAll ->
    try {
        def component = [:]
        component[(art.classifier ?: "") + "@" + art.extension] = art.file?.path
        if (art.classifier == null && resolveAll) {
            def classifiers = getAllArtifacts(art)
            classifiers.each {
                if (it.value != null) {
                    component[it.key] = it.value?.path
                }
            }
        }
        return component
    } catch (e) {
        logger.error("Error: " + e.getMessage(), e)
        logger.error("could not find pom for {}", art.file)
    }
}

task getArtifact() {
    doLast {
        def resolved = [:]
        project.ext.properties["toResolve"].tokenize(';').each {
            dependencies.add 'extraLibs', it
        }
        configurations.extraLibs.transitive(Boolean.valueOf(project.ext.properties["transitive"] ?: "true"))
        configurations.extraLibs.resolvedConfiguration.lenientConfiguration.artifacts.each { art ->
            try {
                def name = art.id.componentIdentifier.displayName
                def component = resolved[name]
                if (component == null) {
                    resolved[name] = [:]
                    component = resolved[name]
                }
                component.putAll(resolveArtifact(art, Boolean.valueOf(project.ext.properties["withClassifiers"] ?: "true")))
            } catch (e) {
                logger.error("Error: " + e.getMessage(), e)
                logger.error("could not find pom for {}", art.file)
            }
        }
        println "<JSON>${JsonOutput.toJson(resolved)}</JSON>"
    }
}

task resolve() {
    doLast {
        project.ext.properties["toResolve"].tokenize(';').each {
            dependencies.add 'extraLibs', it
        }
        def resolved = [:]
        configurations.all.collect {
            if (it.canBeResolved) {
                it.resolvedConfiguration.lenientConfiguration.artifacts.each { art ->
                    try {
                        def name = art.id.componentIdentifier.displayName
                        def component = resolved[name]
                        if (component == null) {
                            resolved[name] = [:]
                            component = resolved[name]
                        }
                        component.putAll(resolveArtifact(art, true))
                    } catch (e) {
                        logger.error("Error: " + e.getMessage(), e)
                        logger.error("could not find pom for {}", art.file)
                    }
                }
            }
        }
        println "<JSON>${JsonOutput.toJson(resolved)}</JSON>"
    }
}

task publishArtifact(type: PublishToMavenRepository) {
    doLast {
        if (project.ext.hasProperty("toUpload")) {
            def toUpload = new JsonSlurper().parseText(project.ext.properties["toUpload"])
            println project.ext.properties["toUpload"]
            def descriptors = new JsonSlurper().parseText(project.ext.properties["descriptors"])
            println project.ext.properties["descriptors"]

            artifactId toUpload.artifactId
            groupId toUpload.groupId
            version toUpload.version
            descriptors.each { descriptor ->
                artifact(descriptor.filePath) {
                    classifier descriptor.classifier.type
                    extension descriptor.classifier.extenstion
                }
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            if (project.hasProperty("descriptors")) {
                def toUpload = new JsonSlurper().parseText(project.properties["toUpload"])
                def descriptors = new JsonSlurper().parseText(project.properties["descriptors"])
                def pomFile = project.properties["pomFile"]

                artifactId toUpload.artifactId
                groupId toUpload.groupId
                version toUpload.version

                descriptors.each { descriptor ->
                    artifact(descriptor.filePath) {
                        artifactId descriptor.artifact.artifactId
                        groupId descriptor.artifact.groupId
                        version descriptor.artifact.version
                        classifier descriptor.classifier.type
                        extension descriptor.classifier.extension
                    }
                }

                if (pomFile != null) {
                    pom.withXml {
                        def sb = asString()
                        sb.setLength 0
                        sb.append file(pomFile).text
                    }
                }

            }
        }
    }
    repositories {
        if (project.hasProperty("targetRepository")) {
            def targetRepository = new JsonSlurper().parseText(project.properties["targetRepository"])
            if (targetRepository.type == "LOCAL") {
                maven {
                    url file(targetRepository.url)
                }
            } else {
                maven {
                    if (it.authentication != null) {
                        credentials {
                            username targetRepository.authentication.login
                            password targetRepository.authentication.password
                        }
                    }
                    url targetRepository.url
                }
            }
        }
    }
}