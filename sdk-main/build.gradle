def moduleName = "com.haulmont.cuba.cli.plugin.sdk"

apply plugin: 'maven'
apply plugin: 'application'

task sourceJar(type: Jar) {
    from file('src/main/java')
    from file('src/main/kotlin')
    from file('src/main/resources')
    classifier = 'sources'
}

artifacts {
    archives sourceJar
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin"
    implementation("org.apache.velocity:velocity:$versions.velocity") {
        // jlink: org.apache.commons.lang.enum: Invalid package name: 'enum' is not a Java identifier
        exclude(group: 'commons-lang', module: 'commons-lang')
    }

    implementation("org.apache.commons:commons-compress:$versions.commonsCompress")

    implementation("com.github.kittinunf.fuel:fuel:$versions.fuel") {
        exclude(group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib')
    }
//    compile("com.github.kittinunf.fuel:fuel-coroutines:$versions.fuel") {
//        exclude(group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib')
//    }
    implementation("com.github.kittinunf.fuel:fuel-gson:$versions.fuel") {
        exclude(group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib')
        exclude(group: 'com.google.code.gson', module: 'gson')
    }

    implementation("org.mapdb:mapdb:$versions.mapdb") {
        exclude(group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib')
        exclude(group: 'com.google.errorprone', module: 'error_prone_annotations')
        exclude(group: 'com.google.guava', module: 'guava')
    }

    //Uncomment for repository script dev
//    compileOnly group: 'org.sonatype.nexus', name: 'nexus-core', version: versions.nxrm3
//    compileOnly group: 'org.sonatype.nexus', name: 'nexus-script', version: versions.nxrm3
//    compileOnly group: 'org.sonatype.nexus', name: 'nexus-security', version: versions.nxrm3
//    compileOnly group: 'org.sonatype.nexus', name: 'nexus-repository', version: versions.nxrm3
//    compileOnly group: 'org.sonatype.nexus.plugins', name: 'nexus-repository-maven', version: versions.nxrm3
//    compileOnly group: 'org.sonatype.nexus.plugins', name: 'nexus-script-plugin', version: versions.nxrm3

    implementation("org.apache.maven:maven-model:$versions.maven")

    implementation("org.redundent:kotlin-xml-builder:$versions.kotlinXmlBuilder")

    testImplementation group: 'junit', name: 'junit', version: versions.jUnit
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--patch-module', "$moduleName=${compileKotlin.destinationDir}"
        ]
        classpath = files()
    }
}

jar {
    // do not permit duplicates in JAR
    duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.FAIL
}

// disable automatic building of ZIP and TAR
configurations.archives.artifacts.removeAll {
    it.file =~ 'tar' || it.file =~ 'zip'
}

mainClassName = "com.haulmont.cli.core.EntryPointKt"
def mainClassModuleName = "com.haulmont.cli.core"

startScripts {
    doLast {
        unixScript.text = unixScript.text
                .replace(
                        "eval set -- \$DEFAULT_JVM_OPTS \$JAVA_OPTS \$CUBA_CLI_OPTS -classpath \"\\\"\$CLASSPATH\\\"\" $mainClassName \"\$APP_ARGS\"",
                        "eval set -- \$DEFAULT_JVM_OPTS \$JAVA_OPTS \$CUBA_CLI_OPTS -p \"\\\"\$CLASSPATH\\\"\" -m $mainClassModuleName/$mainClassName \"\$APP_ARGS\"")

        windowsScript.text = windowsScript.text
                .replace(
                        "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %CUBA_CLI_OPTS%  -classpath \"%CLASSPATH%\" $mainClassName %CMD_LINE_ARGS%",
                        "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %CUBA_CLI_OPTS%  -p \"%CLASSPATH%\" -m $mainClassModuleName/$mainClassName %CMD_LINE_ARGS%")

    }
}

def bundlePlatform = project.hasProperty('targetOsPlatform') ? '-' + project.property('targetOsPlatform') : '';

def bundlesDir = file("bundles")
def bundleOutput = file("${rootProject.buildDir}/bundle" + bundlePlatform)
def nativeBundle = file("${bundleOutput}/native" + bundlePlatform)

def modulesDir = file("${project.buildDir}/modules")
def installedLibsDir = file("${buildDir}/install/${project.name}/lib")
def patchLibsDir = file("${buildDir}/jar-patch")

def modulesConfig = [
        'com.haulmont.cli.core'       : "cli-core-${versions.cliCore}.jar",
        'velocity'                    : "velocity-${versions.velocity}.jar",
        'commons.lang'                : "commons-lang-${versions.commonsLang}.jar",
        'commons.lang3'               : "commons-lang3-${versions.commonsLang3}.jar",
        'commons.collections'         : "commons-collections-${versions.commonsCollections}.jar",
        'commons.configuration'       : "commons-configuration-${versions.commonsConfiguration}.jar",
        'commons.logging'             : "commons-logging-${versions.commonsLogging}.jar",
        'org.apache.commons.compress' : "commons-compress-${versions.commonsCompress}.jar",
        'j2objc.annotations'          : "j2objc-annotations-${versions.j2objcAnnotations}.jar",
        'listenablefuture'            : 'listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar',
        'failureaccess'               : "failureaccess-${versions.failureaccess}.jar",
        'checker.qual'                : "checker-qual-${versions.checkerQual}.jar",
        'error.prone.annotations'     : "error_prone_annotations-${versions.errorProneAnnotations}.jar",
        'com.google.common'           : "guava-${versions.guava}.jar",
        'jansi'                       : "jansi-${versions.jansi}.jar",
        'jline'                       : "jline-${versions.jline}.jar",
        'jcommander'                  : "jcommander-${versions.jCommander}.jar",
        'kotlin.stdlib'               : "kotlin-stdlib-${versions.kotlin}.jar",
        'kotlin.reflect'              : "kotlin-reflect-${versions.kotlin}.jar",
        'kotlin.stdlib.jdk7'          : "kotlin-stdlib-jdk7-${versions.kotlin}.jar",
        'kotlin.stdlib.jdk8'          : "kotlin-stdlib-jdk8-${versions.kotlin}.jar",
        'kotlin.stdlib.common'        : "kotlin-stdlib-common-${versions.kotlin}.jar",
        'kodein.di.core.jvm'          : "kodein-di-core-jvm-${versions.kodein}.jar",
        'kodein.di.generic.jvm'       : "kodein-di-generic-jvm-${versions.kodein}.jar",
        'gson'                        : "gson-${versions.gson}.jar",
        'org.json'                    : "json-${versions.json}.jar",
        'result'                      : "result-${versions.result}.jar",
        'fuel'                        : "fuel-${versions.fuel}.jar",
        'fuel.gson'                   : "fuel-gson-${versions.fuel}.jar",
        'lz4'                         : "lz4-${versions.lz4}.jar",
        'org.eclipse.collections.api' : "eclipse-collections-api-${versions.eclipseCollections}.jar",
        'org.eclipse.collections.impl': "eclipse-collections-${versions.eclipseCollections}.jar",
        'eclipse.collections.forkjoin': "eclipse-collections-forkjoin-${versions.eclipseCollections}.jar",
        'elsa'                        : "elsa-${versions.elsa}.jar",
        'mapdb'                       : "mapdb-${versions.mapdb}.jar",
        'maven.model'                 : "maven-model-${versions.maven}.jar",
        'plexus.utils'                : "plexus-utils-${versions.plexus}.jar",
        'kotlin.xml.builder'          : "kotlin-xml-builder-${versions.kotlinXmlBuilder}.jar",
]

task jarPatch(dependsOn: installDist, group: 'build',
        description: 'Patch dependencies with module information') {
    inputs.dir bundlesDir
    outputs.dir patchLibsDir

    inputs.files installDist.outputs.files

    doLast {
        delete patchLibsDir
        delete modulesDir

        modulesDir.mkdirs()

        // Compile module definitions
        copy {
            from installedLibsDir
            into patchLibsDir
        }

        def javaHome = System.getenv('JAVA11_HOME')
        if (javaHome == null
                || javaHome.isEmpty()) {
            throw new GradleException('JAVA_HOME is not set')
        }

        for (moduleItem in modulesConfig) {
            def moduleItemName = moduleItem.key
            def moduleItemJar = moduleItem.value

            def jarFile = new File(patchLibsDir, moduleItemJar)

            logger.info("Modularize ${moduleItemJar}")

            logger.info("Compile module-info.class")

            def compiledModuleDir = new File(modulesDir, moduleItemName)

            exec {
                workingDir modulesDir

                commandLine(
                        "${javaHome}/bin/javac",
                        '-p', patchLibsDir.absolutePath,
                        '-d', compiledModuleDir.absolutePath,
                        '--patch-module', "${moduleItemName}=${jarFile.absolutePath}",
                        new File(project.file("bundles"), "${moduleItemName}/module-info.java").absolutePath
                )

                standardOutput = System.out
                errorOutput = System.out
            }

            logger.info("Update JAR")

            exec {
                workingDir patchLibsDir

                commandLine(
                        "${javaHome}/bin/jar",
                        'uf',
                        jarFile.absolutePath,
                        '-C',
                        compiledModuleDir.absolutePath,
                        'module-info.class'
                )

                standardOutput = System.out
                errorOutput = System.out
            }
        }
    }
}

task bundle(dependsOn: jarPatch, group: 'distribution', description: 'Builds bundle with custom JRE') {
    outputs.dir bundleOutput
    inputs.dir patchLibsDir

    ext.appModulePaths = [patchLibsDir]

    doLast {
        delete bundleOutput

        logger.info("Linking")

        def javaHome = System.getenv('JAVA11_HOME')
        if (javaHome == null
                || javaHome.isEmpty()) {
            throw new GradleException('JAVA_HOME is not set')
        }

        def targetOsJavaHome = project.hasProperty('targetOsJavaHome') ? project.property('targetOsJavaHome') : null
        if (targetOsJavaHome == null
                || targetOsJavaHome.isEmpty()) {
            targetOsJavaHome = javaHome
        }

        logger.info('Target JAVA_HOME ' + targetOsJavaHome)

        // Call jlink
        exec {
            workingDir buildDir

            commandLine(
                    "${javaHome}/bin/jlink",
                    '--module-path', (["${targetOsJavaHome}/jmods"] + ext.appModulePaths).grep().join(File.pathSeparator),
                    '--add-modules', moduleName,
                    '--output', bundleOutput,
                    '--launcher', "cuba-sdk=$mainClassModuleName/$mainClassName",
                    '--compress=2',
                    '--no-header-files',
                    '--no-man-pages',
                    '--ignore-signing-information'
            )

            standardOutput = System.out
            errorOutput = System.out

            logger.info commandLine.join(' ')
        }

        logger.info("Remove standard launcher script")

        def cubacliFile = new File(bundleOutput, "bin/cuba-sdk")
        def cubacliBatFile = new File(bundleOutput, "bin/cuba-sdk.bat")

        if (cubacliFile.exists()) {
            cubacliFile.delete()
        }
        if (cubacliBatFile.exists()) {
            cubacliBatFile.delete()
        }

        logger.info("Fix permissions")

        // fix non-writable files in 'legal/'
        def osName = System.getProperty("os.name").toLowerCase()
        if (osName.contains('nux')
                || osName.contains('mac')) {
            exec {
                executable 'chmod'
                args = ['u+w', '-R', bundleOutput]
            }
        }

        def targetOsPlatform = 'linux'
        if (osName.contains('mac')) {
            targetOsPlatform = 'macos'
        } else if (osName.contains('Win')) {
            targetOsPlatform = 'windows'
        }
        if (project.hasProperty('targetOsPlatform')) {
            targetOsPlatform = project['targetOsPlatform']
        }

        // create nested folder

        nativeBundle.mkdir()
        bundleOutput.eachFile { file ->
            if (file.name != nativeBundle.name) {
                file.renameTo(new File(nativeBundle, file.name))
            }
        }

        // create custom launcher script

        def binFolder = new File(bundleOutput, 'bin')
        binFolder.mkdir()

        if (targetOsPlatform == 'linux' || targetOsPlatform == 'macos') {
            def cubaCliScript = new File(binFolder, 'cuba-sdk')
            cubaCliScript.text = project.file('etc/cuba-sdk-unix').text
        } else if (targetOsPlatform == 'windows') {
            def cubaCliScript = new File(binFolder, 'cuba-sdk.bat')
            cubaCliScript.text = project.file('etc/cuba-sdk-windows.bat').text
        }

        // set executable flag

        if (osName.contains('nux')
                || osName.contains('mac')) {
            exec {
                executable 'chmod'
                args = ['a+x', '-R', binFolder]
            }
        }

        logger.info("Copy system plugins")

//        project(':gradle-connector').tasks["installPlugin"].execute()
    }
}

task buildWinSetup(dependsOn: bundle, group: 'distribution', description: 'Builds Windows installer') {
    doLast {
        if (project.hasProperty('targetOsPlatform') && project['targetOsPlatform'] == 'windows') {
            def setupScriptDir = "${rootProject.projectDir}"
            def setupScriptFile = "${setupScriptDir}/win-setup.iss"

            def cliBuildBundleDir = "${project.buildDir}/bundle-windows"
            def cliBuildDistributionsDir = "${project.buildDir}/distributions"

            exec {
                commandLine "cmd", "/c", "iscc",
                        "${setupScriptFile}",
                        "/DAppVersion=${version}",
                        "/DAppSrc=${cliBuildBundleDir}",
                        "/O${cliBuildDistributionsDir}"
            }
        } else {
            throw new GradleException('Only for Windows targetOsPlatform')
        }
    }
}
